from crypto import CryptoController
from crypto.constants import (_2048_PRIME, _2048_ELEMENT, _2048_KEY,
                              _4096_PRIME, _4096_ELEMENT, _4096_KEY)

# Cryptosystem configuration
# type: integer (alternative: elliptic, not implemented)
# Quadratic residues mod p generated by g0 ^ 2

p  = _4096_PRIME # _2048_PRIME
g0 = _4096_ELEMENT # _2048_ELEMENT

cryptoController = CryptoController(config={
    'modulus': p,
    'root_order': 2,
    'element': g0
}, _type='integer')

# Validate cryptosysten and extract corresponding primitives
cryptoController.load_cryptosystem()
primitives = cryptoController.export_primitives()

# Extract keygen functionality and generate key pair
generate_keypair = primitives['generate_keypair']
private_key, public_key = generate_keypair(_2048_KEY)

print('\n-- PUBLIC KEY --\n')
print(public_key)

# Extract encryption function
encrypt = primitives['encrypt']

# Encrypt element
message = 373784375
decryptor, cipher = encrypt(element=message, public_key=public_key)

print('\n-- CIPHER --\n')
print('Decryptor\n')
print(decryptor)
print('\nCiphertext\n')
print(cipher)
print()
