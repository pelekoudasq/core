from crypto import CryptoController
from crypto.constants import (_2048_PRIME, _2048_ELEMENT, _2048_KEY,
                              _4096_PRIME, _4096_ELEMENT, _4096_KEY)

# Cryptosystem configuration
# type: integer (alternative: elliptic, not implemented)
# Quadratic residues mod p generated by g0 ^ 2

cryptoController = CryptoController(config={
    'modulus': _4096_PRIME,  # p
    'root_order': 2,
    'element': _4096_ELEMENT # g0
}, _type='integer')

# Validate cryptosysten and extract corresponding primitives
cryptoController.load_cryptosystem()
primitives = cryptoController.export_primitives()

cryptosys = primitives['cryptosys']
#
# import json
# print(json.dumps(cryptosys, indent=4))
#

# Extract keygen functionality and generate key pair
keygen = primitives['keygen']
private_key, public_key = keygen(_4096_KEY)

# print('\n-- PUBLIC KEY --\n')
# print(public_key)

# Extract encryption function
encrypt = primitives['encrypt']

# Encrypt element
message = 373784375
decryptor, cipher = encrypt(element=message, public_key=public_key)

# print('\n-- CIPHER --\n')
# print('Decryptor\n')
# print(decryptor)
# print('\nCiphertext\n')
# print(cipher)
# print()

schnorr_proof  = primitives['schnorr_proof']
schnorr_verify = primitives['schnorr_verify']

import json
print(json.dumps(cryptosys, indent=4, sort_keys=True))

extras = [0, 7, 11, 666]
proof = schnorr_proof(private_key, public_key, *extras)
valid = schnorr_verify(proof, public_key, *extras)
print(valid)
